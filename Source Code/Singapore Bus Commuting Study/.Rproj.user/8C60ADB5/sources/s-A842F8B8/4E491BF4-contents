---
title: "exe05"
author: "Amey Rathi"
date: "5/4/2020"
output:
  word_document: default
  pdf_document: default
  html_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Importing all the packages 

## Spdep is very usful for spatial statistical tools 

```{r eval=TRUE, echo=TRUE, message=TRUE, warning=FALSE}
packages = c('rgdal', 'sf', 'spdep', 'tmap', 'tidyverse')
for (p in packages){
  if(!require(p, character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```
# Import Hunan geospatial data (which is in .shp file)
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
hunan <- readOGR(dsn = "data/shapefile", layer = "Hunan")
```
# Import all attribute data from csv file 
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
hunan2012 <- read_csv("data/attribute/Hunan_2012.csv")
```
## Join both the tables by using left join
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
hunan@data <- left_join(x = hunan@data, y=hunan2012)
```
## Do quick visualisation for GDP per each county
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
qtm(hunan,fill="GDPPC")
```
# Perform Statistical Tests

### Null hypothesis is that GDP Per Capita is randomly distributed among different counties in Hunan 
### Alternate hypothesis is that GDPPC is not randomly distributed among different counties in Hunan 
### The confidence interval is 95%

# Defining Spatial Neighbours 

## Creating Spatial Weights
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
str(wm_q)
```
## Plot neighbours according to queen neighbours 
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
plot(hunan, col="white", border="lightgrey")
plot(wm_q, coords=coordinates(hunan), col="Red",add=TRUE)
```
## Create ROOK neighbours
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
wm_r <- poly2nb(hunan, queen=FALSE)
```
## Plot rook neighbours and queen neighbours on the same map to find the differences!

### The green edges are the added connections in queen neighbours
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
plot(hunan, col="white", border="lightgrey")
plot(wm_q, coords=coordinates(hunan), col="green",add=TRUE)
plot(wm_r, coords=coordinates(hunan), col="Red",add=TRUE)
```
## Create weight matrix by cut off distance matrix 
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```
### Computing fixed distance weight matrix
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
str(wm_d62)

```
## Displaying matrix as a table 
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
table(hunan$County, card(wm_d62))
```
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
table(n_comp$comp.id)

```
## Plotting it!
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
plot(hunan, border="lightgrey")
plot(wm_d62, coords, add=TRUE, col="green")
plot(k1, coords, add=TRUE, col="red", length=0.08)
```
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
par(mfrow=c(1,2))
plot(hunan, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```
## Creating adaptive distance weight matrix
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
wm_knn6 <- knn2nb(knearneigh(coords, k=6))
wm_knn6
str(wm_knn6)

```
## Plotting it!
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
plot(hunan, border="lightgrey")
plot(wm_knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
## Creating weight matrix based on IDW
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```
## Standardising the row matrix
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q

rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
summary(rswm_ids)
```
## Computer average neighbour GDPPC value and append it to existing table 
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag

lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan@data <- left_join(hunan@data,lag.res)
```
## Plotting it
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```
# Performing Statistical Analysis 

## Use Moran's I value
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
moran.test(hunan$GDPPC, listw=rswm_q, zero.policy = TRUE, na.action=na.omit)

set.seed(1234)
bperm= moran.mc(hunan$GDPPC, listw=rswm_q, nsim=999, zero.policy = TRUE, na.action=na.omit)
bperm
```
### Visualising Monte Carlo simulation
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Moran's I")
abline(v=0, col="red")
```

## Use Geory's C
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
geary.test(hunan$GDPPC, listw=rswm_q)

set.seed(1234)
bperm=geary.mc(hunan$GDPPC, listw=rswm_q, nsim=999)
bperm
```
### Visualising Monte Carlo simulation
```{r eval=TRUE, echo=TRUE, message=TRUE, warning=TRUE}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```