tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps=leaflet::providers$OpenStreetMap)
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps="OpenStreetMap")
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps="OpenStreetMaps")
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps="openstreetmap")
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps="openstreetmaps")
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_layout(basemaps="https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}")
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_layout(basemaps = 'https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}')
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_layout(basemaps = c('OpenStreetMap'))
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = c('OpenStreetMap'))
tmap_mode("plot")
tm_view(basemaps = c('OpenStreetMap'))+
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_mode("plot")
tm_shape(airbnb2)+
tm_view(basemaps = c('OpenStreetMap'))+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_mode("plot")
tm_shape(airbnb2)+
tm_view(basemaps = 'OpenStreetMap')+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_mode("plot")
tm_shape(airbnb2)+
tm_view(basemaps = 'http://tile.openstreetmap.org/{z}/{x}/{y}.png')+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = 'OpenStreetMap')
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = 'http://tile.openstreetmap.org/{z}/{x}/{y}.png')
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = 'OpenStreetMap')
tm_shape(airbnb2)+
tm_view(basemaps = 'OpenStreetMap')
tm_shape(airbnb2)+
tm_dots()+
tm_view(basemaps = 'OpenStreetMap')
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = 'openstreetmap')
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_optiona(OpenStreetMap)
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_options(OpenStreetMap)
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_options(basemaps='OpenStreetMap')
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_options(basemaps=c('OpenStreetMap'))
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_basemap(leaflet::OpenStreetMap)
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_basemap(leaflet::OpenStreetMap)
tm_basemap(leaflet::OpenStreetMap)+
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_basemap(leaflet::OpenStreetMap.Mapnik)+
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_basemap('leaflet::OpenStreetMap.Mapnik')+
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_basemap('leaflet::OpenStreetMap.Mapnik')+
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)
tm_options(basemaps='leaflet::OpenStreetMap.Mapnik')+
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)
tmap_options(basemaps='leaflet::OpenStreetMap.Mapnik')+
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)
tmap_options(basemaps='leaflet::OpenStreetMap.Mapnik')
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tm_layout(basemaps = leaflet::providers$OpenStreetMap)
tmap_mode("view")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)+
tmap_mode("view")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)
tmap_mode("view")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)
View(airbnb2)
packages = c('rgdal', 'maptools', 'raster','spatstat', 'tmap', 'sf', 'tidyverse')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=4326)
airbnb2 <- st_transform(airbnb,3414)
tmap_mode("view")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)
View(airbnb2)
tmap_mode("view")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 0.01,
border.col = "black",
border.lwd = 1)
tmap_mode("view")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 1,
border.col = "black",
border.lwd = 1)
View(airbnb)
knitr::opts_chunk$set(echo = TRUE)
packages = c('rgdal', 'maptools', 'raster','spatstat', 'tmap', 'sf', 'tidyverse')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=4326)
airbnb2 <- st_transform(airbnb,3414)
tmap_mode("view")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 1,
border.col = "black",
border.lwd = 1)
knitr::opts_chunk$set(echo = TRUE)
packages = c('rgdal', 'maptools', 'raster','spatstat', 'tmap', 'sf', 'tidyverse')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('rgdal', 'maptools', 'raster','spatstat', 'tmap', 'sf', 'tidyverse')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=4326)
airbnb2 <- st_transform(airbnb,3414)
tmap_mode("view")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 1,
border.col = "black",
border.lwd = 1)
tmap_mode("plot")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "OpenStreetMap")
tmap_mode("plot")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "OpenStreetMap")
View(airbnb)
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "OpenStreetMap")
tmap_mode("view")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tmap_mode("view")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)
tmap_mode("view")
a <- tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)
tmap_mode("plot")
a
tmap_mode("plot")
a <- tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "OpenStreetMap")
tmap_mode("plot")
a <- tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "OpenStreetMap")
a
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "OpenStreetMap")
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "openstreetmap")
tmap_mode("plot")
tm_shape(airbnb2)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "openstreetmap", projection = 3414)
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=3414)
#airbnb2 <- st_transform(airbnb,3414)
tmap_mode("plot")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "openstreetmap", projection = 3414)
tmap_mode("plot")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "OpenStreetMap", projection = 3414)
packages = c('rgdal', 'maptools', 'raster','spatstat', 'tmap', 'sf', 'tidyverse')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=3414)
st_is_longlat(airbnb)
#airbnb2 <- st_transform(airbnb,3414)
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=3414)
st_set_crs(3414)
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=3414)
st_set_crs(airbnb,3414)
st_is_longlat(airbnb)
#airbnb2 <- st_transform(airbnb,3414)
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=3414)
st_set_crs(airbnb,3414)
st_transform(airbnb,3414)
st_is_longlat(airbnb)
#airbnb2 <- st_transform(airbnb,3414)
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=3414)
st_set_crs(airbnb,3414)
st_transform(airbnb,3414)
st_is_longlat(airbnb)
#airbnb2 <- st_transform(airbnb,3414)
View(airbnb)
View(airbnb2)
airbnb <- read_csv("data/aspatial/listings.csv")
singapore <- st_read(dsn = "data/geospatial", layer = "CostalOutline")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
singapore
mpsz
airbnb<-st_as_sf(airbnb,coords = c("longitude","latitude"),crs=3414)
airbnb<-st_set_crs(airbnb,3414)
airbnb<-st_transform(airbnb,3414)
st_is_longlat(airbnb)
#airbnb2 <- st_transform(airbnb,3414)
tmap_mode("plot")
tm_shape(airbnb)+
tm_dots(col = "red",
size = 0.1,
border.col = "black",
border.lwd = 1)+
tm_view(basemaps = "OpenStreetMap", projection = 3414)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(leaflet)
museum <- read.csv("data/aspatial/listings.csv")
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("price1", "Price", min(museum$price), max(museum$price), value = 20
)
)
)
server <- function(input, output, session) {
sliderData <- reactive({
museum[museum$price >= input$price1[1] & museum$price <= input$price1[2],]
})
output$map <- renderLeaflet({
leaflet(museum) %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(minZoom = 6, maxZoom = 100)) %>%
setView(lng=103.851959, lat=1.290270, zoom=9) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery"))%>%
addMarkers(lng = museum$longitude,lat = museum$latitude)
}) }
# observe({
#   leafletProxy("map", data = sliderData()) %>%
#   clearMarkers() %>%
#     addCircleMarkers(data = fake_data[fake_data$Class1 == TRUE,], group = "Class1", popup = ~as.character(TownName), color = 'black', fillOpacity = 1) %>%
#     addCircleMarkers(data = fake_data[fake_data$Class2 == TRUE,], group = "Class2", popup = ~as.character(TownName), color = 'red', fillOpacity = 1) %>%
#     addLayersControl(
#       overlayGroups = c("Class1", "Class2"),
#       options = layersControlOptions(collapsed = FALSE),
#       position = "bottomright"
#     )
# })}
shinyApp(ui=ui,server=server)
